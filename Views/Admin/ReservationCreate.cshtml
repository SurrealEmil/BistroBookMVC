@using BistroBookMVC.Models.Reservation
@model CreateReservation

<h1>Create New Reservation</h1>

<form asp-controller="Admin" asp-action="ReservationCreate" method="post">

    <!-- Date field at the top -->
    <div class="form-group">
        <label asp-for="Date">Date</label>
        <input asp-for="Date" type="date" id="date-input" class="form-control" />
        <span asp-validation-for="Date" class="text-danger"></span>
    </div>

    <!-- Guest Count dropdown -->
    <div class="form-group">
        <label asp-for="GuestCount">Guests</label>
        <select asp-for="GuestCount" id="guest-count" class="form-control">
            @for (int i = 1; i <= 8; i++)
            {
                <option value="@i">@i</option>
            }
        </select>
        <span asp-validation-for="GuestCount" class="text-danger"></span>
    </div>

    <!-- TableId dropdown, dynamically populated -->
    <div class="form-group">
        <label asp-for="TableId">TableId</label>
        <select asp-for="TableId" id="table-id" class="form-control">
        </select>
        <span asp-validation-for="TableId" class="text-danger"></span>
    </div>

    <!-- Start Time dropdown, dynamically populated -->
    <div class="form-group">
        <label asp-for="StartTime">Start Time</label>
        <select asp-for="StartTime" id="start-time" class="form-control">
        </select>
        <span asp-validation-for="StartTime" class="text-danger"></span>
    </div>

    <!-- First Name field -->
    <div class="form-group">
        <label asp-for="FirstName">First Name</label>
        <input asp-for="FirstName" class="form-control" />
        <span asp-validation-for="FirstName" class="text-danger"></span>
    </div>

    <!-- Last Name field -->
    <div class="form-group">
        <label asp-for="LastName">Last Name</label>
        <input asp-for="LastName" class="form-control" />
        <span asp-validation-for="LastName" class="text-danger"></span>
    </div>

    <!-- Phone Number field -->
    <div class="form-group">
        <label asp-for="PhoneNumber">Phone Number</label>
        <input asp-for="PhoneNumber" class="form-control" />
        <span asp-validation-for="PhoneNumber" class="text-danger"></span>
    </div>

    <!-- Email field -->
    <div class="form-group">
        <label asp-for="Email">Email</label>
        <input asp-for="Email" class="form-control" />
        <span asp-validation-for="Email" class="text-danger"></span>
    </div>

    <button type="submit" class="btn btn-primary">Create</button>
</form>

<!-- Add scripts for handling dropdown changes and API calls -->
@section Scripts {
    <script>
        $(document).ready(function () {
            // Handle change in GuestCount dropdown
            $('#guest-count').change(function () {
                        var guestCount = $(this).val();
                if (guestCount) {
                    // Make API call to get available tables
                            $.ajax({
                        url: `https://localhost:7042/api/Tables/GetAvailableTables/${guestCount}`,
                        type: 'GET',
                                success: function (data) {
                            // Populate TableId dropdown
                            var tableDropdown = $('#table-id');
                            tableDropdown.empty();
                            tableDropdown.append('<option value="">Select a table</option>');
                            $.each(data, function (index, table) {
                                tableDropdown.append(`<option value="${table.id}">${table.seatCount}</option>`);
                            });
                        }
                    });
                    }
                    });

                    // Handle change in TableId dropdown and Date input
                    $('#table-id, #date-input').change(function () {
                        var tableId = $('#table-id').val();
                        var date = $('#date-input').val();
                        if (tableId && date) {
                            // Make API call to get reservations by TableId and Date
                            $.ajax({
                                url: `https://localhost:7042/api/Reservations/GetReservationsByTableIdAndDate/${tableId}/${date}`,
                                type: 'GET',
                                success: function (data) {
                                    var availableTimes = getAvailableTimes(data); // Get available times based on reservations

                                    // Populate StartTime dropdown
                                    var timeDropdown = $('#start-time');
                                    timeDropdown.empty();
                                    timeDropdown.append('<option value="">Select start time</option>');
                                    $.each(availableTimes, function (index, time) {
                                        timeDropdown.append(`<option value="${time.time}">${time.time}</option>`);
                                    });
                                }
                            });
                        }
                    });

                    // Create time slots in half-hour increments
                    function createTimeSlots() {
                        const times = [];
                        for (let hour = 10; hour <= 20; hour++) {
                            for (let minute = 0; minute < 60; minute += 30) {
                                if (hour === 20 && minute > 0) break;
                                const time = `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`;
                                times.push(time);
                            }
                        }
                        return times;
                    }

                    // Get the available times based on booked times
                    function getAvailableTimes(bookedReservations) {
                        const slots = createTimeSlots();
                        const bookedTimes = bookedReservations.map((reservation) =>
                            reservation.startTime.split(':')[0] + ':' + reservation.startTime.split(':')[1]
                        );

                        return slots.map((time, index) => {
                            // Check if this time or any of the next 3 slots are booked (2 hours total)
                            const isBooked = bookedTimes.includes(time) ||
                                // Check next three slots (the two-hour buffer after)
                                [1, 2, 3].some(offset => slots[index + offset] && bookedTimes.includes(slots[index + offset])) ||
                                // Check previous three slots (the two-hour buffer before)
                                [-1, -2, -3].some(offset => slots[index + offset] && bookedTimes.includes(slots[index + offset]));

                            return {
                                time,
                                isBooked,
                            };
                        }).filter(slot => !slot.isBooked); // Only return available slots
                    }
                });
    </script>
}


